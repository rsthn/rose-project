(shield::validate

	(shield::field company
		required: true
		pattern: text
		min-length: 4
	)

	(shield::field name
		required: true
		pattern: text
		min-length: 4
	)

	(shield::field email
		required: true
		pattern: email
		check:email_alr: (isnull (db::scalar `SELECT user_id FROM ##users WHERE is_active=1 AND email={escape {formData.email}}`))
	)

	(shield::field username
		required: true
		pattern: identifier
		check:username_alr: (isnull (db::scalar `SELECT user_id FROM ##users WHERE is_active=1 AND username={escape {formData.username}}`))
	)

	(shield::field npassword
		required: true
		min-length: 8
		set: (sentinel::password (formData.npassword))
	)

	(shield::field rpassword
		required: true
		requires: npassword
		min-length: 8
		set: (sentinel::password (formData.rpassword))
		check:rpassword: (eq (formData.rpassword) (formData.npassword))
	)
)

(db::exec `INSERT INTO ##users SET created='{datetime::now}', username={escape {username}}, email={escape {email}}, password={escape {npassword}}, name={escape {name}}`)

(set id (db::lastInsertId))

(db::exec `INSERT INTO ##user_privileges SET user_id={id}, privilege_id=200`)
(db::exec `INSERT INTO ##companies SET created='{datetime::now}', user_id={id}, is_default=1, name={escape {company}}`)

(set token (math::uuid))

(call 'lib.directives.string' user_id: (id) type: 'user_not_verified' value: (token))

(set data (&
	name: (name)
	url: '(gateway.ep)?f=auth.confirm-account&token=(token)'
))

(mail::send
	RCPT (email)
	SUBJECT 'Confirm Registration'
	BODY (expand (strings.@mail_register) (data))
)

(&)
